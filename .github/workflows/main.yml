# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events
  push:
    branches: [ Start-Actions-for-API-Doc-Build ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v2
      
      - name: Compile API Documentation
        uses: actions/setup-node@v1
      - run: npm install -g multi-file-swagger
      - run: multi-file-swagger -o yaml api/API.yml > api/compiled.yml
      
      - name: Build Redoc
        uses: seeebiii/redoc-cli-github-action@v9
        with:
          args: bundle ./api/compiled.yml -o ./api/redoc.yml

      - name: ZIP project
        run: |
          ls -la
          zip release *

  release:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: octokit/request-action@v2.x
        id: get_latest_release
        with:
            route: GET /repos/:repository/releases/latest
            repository: ${{ github.repository }}
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: get upload url
        id: get_upload_url
        run: |
          url=$(echo "$response" | jq -r '.upload_url')
          echo "::set-output name=url::$url"
        env: 
            response:  ${{ steps.get_latest_release.outputs.data }}
      
      - name: Upload a Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # The URL for uploading assets to the release
          upload_url:  ${{steps.get_upload_url.outputs.url}}
          # The path to the asset you want to upload
          asset_path: ./release.zip
          # The name of the asset you want to upload
          asset_name: release.zip
          # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
          asset_content_type: application/zip